%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/

%% Created for Simon Kessler at 2015-11-11 16:45:10 +0100 


%% Saved with string encoding Unicode (UTF-8) 



@article{Dorfman:1999aa,
	Abstract = {Two and a half years ago, I retired from the aerospace and defense industry after 35 years. Of those 35 years, I spent the last 20 in software and system engineering, including the last 10 in software process improvement, quality, and related disciplines. I now work in commercial industry, in software quality for a company where that means process development, documentation, and improvement, rather than testing (as it means at many other companies). From this new perspective, I want to compare the software engineering cultures in these two different environments, examine specifics, and see if any general conclusions can be drawn},
	Author = {Dorfman, M. },
	Booktitle = {Software, IEEE},
	Date-Added = {2015-11-11 15:45:07 +0000},
	Date-Modified = {2015-11-11 15:45:07 +0000},
	Doi = {10.1109/52.805481},
	Isbn = {0740-7459},
	Journal = {Software, IEEE},
	Journal1 = {Software, IEEE},
	Keywords = {DP industry; aerospace industry; software engineering; aerospace industry; commercial industry; defense industry; documentation; software engineering culture; software process improvement; software quality; system engineering; Aerospace engineering; Aerospace industry; Computer industry; Defense industry; Documentation; Software engineering; Software quality; Software systems; Software testing; Systems engineering and theory},
	Number = {6},
	Pages = {97--100},
	Title = {Commercial vs. aerospace worlds: comparing software engineering cultures},
	Ty = {JOUR },
	Vo = {16},
	Volume = {16},
	Year = {1999},
	Year1 = {Nov/Dec 1999},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/52.805481}}

@article{Hohler:1998aa,
	Abstract = {Gegeben wird ein {\"U}berblick {\"u}ber den aktuellen Stand der Normung auf dem Gebiet der Pr{\"u}fung und Qualit{\"a}tssicherung von Software mit Schwerpunkt Steuerungssoftware, der sowohl Normen als auch bereits ver{\"o}ffentlichte Normentw{\"u}rfe ber{\"u}cksichtigt. Derzeit existieren zahlreiche Normen und Normentw{\"u}rfe f{\"u}r Software unterschiedlicher Kategorien (Anwendungs-, System- und Steuerungssoftware). Sie unterscheiden sich einerseits nach dem Geltungsbereich, d.h. nach der Art von Software, auf die sie anwendbar sind. Andererseits werden mit Normen auch verschiedene Zwecke verfolgt, sie k{\"o}nnen z.B. zur Vereinheitlichung der verwendeten Begriffe dienen oder ganz konkrete Pr{\"u}fvorschriften festlegen. Ferner besch{\"a}ftigen sich gleichzeitig mehrere Normierungsgremien mit diesem Gebiet, was zum Teil zu sich inhaltlich {\"u}berschneidenden und noch nicht harmonisierten Entw{\"u}rfen f{\"u}hrt. Als Basis f{\"u}r die Entwicklung jeglicher Art von Software wird heute ein Qualit{\"a}tsmanagementsystem nach DIN EN ISO 9001 angesehen. Sie beschreibt organisatorische, administrative und technische Ma{\ss}nahmen eines Qualit{\"a}tsmanagementsystems. Bei der Entwicklung von Software mit Sicherheitsaufgaben m{\"u}ssen zus{\"a}tzliche Anforderungen erf{\"u}llt sein. In diesem Bereich sollten die Normentw{\"u}rfe IEC 1508 oder DIN V VDE 0801 herangezogen werden. Diese sind zwar noch nicht vollst{\"a}ndig ausgereift, stellen aber eine gute Informationsquelle dar. In Anwendungsbereichen mit besonders hohen Sicherheitsanforderungen (zivile Luftfahrt, Kerntechnik, Raumfahrt, Eisenbahntechnik) liegen anwendungsbezogene Standards vor. Soll nicht der Entwicklungsproze{\ss}, sondern das Endprodukt Software bewertet werden, mu{\ss} eine Produktpr{\"u}fung nach DIN ISO/IEC 12119 durchgef{\"u}hrt werden. Inhalt dieser Norm sind sowohl die Anforderungen an Software-Erzeugnisse (G{\"u}tebedingungen) als auch die Verfahren zu deren Pr{\"u}fung (Pr{\"u}fbestimmungen).},
	Author = {Hohler, Bernd and Villinger, Ulrike},
	Booktitle = {Informatik-Spektrum},
	Da = {1998/04/01},
	Date-Added = {2015-11-11 15:40:39 +0000},
	Date-Modified = {2015-11-11 15:40:50 +0000},
	Doi = {10.1007/s002870050088},
	Isbn = {0170-6012},
	J2 = {Informatik-Spektrum},
	Keywords = {Schl{\"u}sselw{\"o}rter  Normen; Steuerungssoftware; Qualit{\"a}tsmanagement; funktionale Sicherheit von Software; Key words  Standards; Process Control Software; Quality Management; Software Safety},
	La = {German},
	Number = {2},
	Pages = {63-72},
	Publisher = {Springer-Verlag},
	Title = {Normen und Richtlinien zur Pr{\"u}fung und  Qualit{\"a}tssicherung von Steuerungssoftware},
	Ty = {JOUR},
	Url = {http://dx.doi.org/10.1007/s002870050088},
	Volume = {21},
	Year = {1998},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s002870050088}}

@article{Maxwell:1996aa,
	Abstract = {The identification, combination, and interaction of the many factors which influence software development productivity makes the measurement, estimation, comparison and tracking of productivity rates very difficult. Through the analysis of a European Space Agency database consisting of 99 software development projects from 37 companies in a European countries, the paper seeks to provide significant and useful Information about the major factors which influence the productivity of European space, military, and industrial applications, as well as to determine the best metric for measuring the productivity of these projects. Several key findings emerge from the study. The results indicate that some organizations are obtaining significantly higher productivity than others. Some of this variation is due to the differences in the application category and programming language of projects in each company; however, some differences must also be due to the ways in which these companies manage their software development projects. The use of tools and modern programming practices were found to be major controllable factors in productivity improvement. Finally, the lines-of-code productivity metric is shown to be superior to the process productivity metric for projects in the authors' database},
	Author = {Maxwell, K. D. and Van Wassenhove, L. and Dutta, S.},
	Booktitle = {Software Engineering, IEEE Transactions on},
	Date-Added = {2015-11-11 15:37:38 +0000},
	Date-Modified = {2015-11-11 15:37:38 +0000},
	Doi = {10.1109/32.544349},
	Isbn = {0098-5589},
	Journal = {Software Engineering, IEEE Transactions on},
	Journal1 = {Software Engineering, IEEE Transactions on},
	Keywords = {aerospace computing; high level languages; human resource management; military computing; production engineering computing; programming; software metrics; software tools; European Space Agency database; European industrial applications; European military applications; European space applications; lines-of-code productivity metric; process productivity metric; programming language; software development productivity; software development projects; tools; Aerospace industry; Application software; Computer industry; Databases; Defense industry; Extraterrestrial measurements; Information analysis; Productivity; Programming; Software measurement},
	Number = {10},
	Pages = {706--718},
	Title = {Software development productivity of European space, military, and industrial applications},
	Ty = {JOUR },
	Vo = {22},
	Volume = {22},
	Year = {1996},
	Year1 = {Oct 1996},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/32.544349}}

@article{Petersen:2010aa,
	Abstract = {So far, only few in-depth studies focused on the direct comparison of process models in general, and between plan-driven and incremental/agile approaches in particular. That is, it is not made explicit what the effect is of moving from one model to another model. Furthermore, there is limited evidence on advantages and issues encountered in agile software development, this is specifically true in the context of large-scale development. The objective of the paper is to investigate how the perception of bottlenecks, unnecessary work, and rework (from hereon referred to as issues) changes when migrating from a plan-driven to an incremental software development approach with agile practices (flexible product backlog, face-to-face interaction, and frequent integration), and how commonly perceived these practices are across different systems and development roles. The context in which the objective should be achieved is large-scale development with a market-driven focus. The selection of the context was based on the observation in related work that mostly small software development projects were investigated and that the investigation was focused on one agile model (eXtreme programming). A case study was conducted at a development site of Ericsson AB, located in Sweden in the end of 2007. In total 33 interviews were conducted in order to investigate the perceived change when migrating from plan-driven to incremental and agile software development, the interviews being the primary source of evidence. For triangulation purposes measurements collected by Ericsson were considered, the measurements relating to unnecessary work (amount of discarded requirements) and rework (data on testing efficiency and maintenance effort). Triangulation in this context means that the measurements were used to confirm the perceived changes with an additional data source. In total 64 issues were identified, 24 being of general nature and the remaining 40 being local and therefore unique to individual's opinions or a specific system. The most common ones were documented and analyzed in detail. The commonality refers to how many persons in different roles and across the systems studied have mentioned the issues for each of the process models. The majority of the most common issues relates to plan-driven development. We also identified common issues remaining for agile after the migration, which were related to testing lead-time, test coverage, software release, and coordination overhead. Improvements were identified as many issues commonly raised for the plan-driven approach were not raised anymore for the incremental and agile approach. It is concluded that the recent introduction (start in 2005 with the study being conducted in the end of 2007) of incremental and agile practices brings added values in comparison to the plan-driven approach, which is evident from the absence of critical issues that are encountered in plan-driven development.
},
	Author = {Petersen, Kai and Wohlin, Claes},
	Booktitle = {Empirical Software Engineering},
	Da = {2010/12/01},
	Date-Added = {2015-11-11 15:31:16 +0000},
	Date-Modified = {2015-11-11 15:31:19 +0000},
	Doi = {10.1007/s10664-010-9136-6},
	Isbn = {1382-3256},
	J2 = {Empir Software Eng},
	Keywords = {Incremental; Agile; Plan-driven; Case study; Migration},
	La = {English},
	Number = {6},
	Pages = {654-693},
	Publisher = {Springer US},
	Title = {The effect of moving from a plan-driven to an incremental software development approach with agile practices},
	Ty = {JOUR},
	Url = {http://dx.doi.org/10.1007/s10664-010-9136-6},
	Volume = {15},
	Year = {2010},
	Bdsk-Url-1 = {http://dx.doi.org/10.1007/s10664-010-9136-6}}

@article{Baca:2015aa,
	Abstract = {A security-enhanced agile software development process, SEAP, is introduced in the development of a mobile money transfer system at Ericsson Corp. A specific characteristic of SEAP is that it includes a security group consisting of four different competences, i.e., Security manager, security architect, security master and penetration tester. Another significant feature of SEAP is an integrated risk analysis process. In analyzing risks in the development of the mobile money transfer system, a general finding was that SEAP either solves risks that were previously postponed or solves a larger proportion of the risks in a timely manner. The previous software development process, i.e., The baseline process of the comparison outlined in this paper, required 2.7 employee hours spent for every risk identified in the analysis process compared to, on the average, 1.5 hours for the SEAP. The baseline development process left 50{\%} of the risks unattended in the software version being developed, while SEAP reduced that figure to 22{\%}. Furthermore, SEAP increased the proportion of risks that were corrected from 12.5{\%} to 67.1{\%}, i.e., More than a five times increment. This is important, since an early correction may avoid severe attacks in the future. The security competence in SEAP accounts for 5{\%} of the personnel cost in the mobile money transfer system project. As a comparison, the corresponding figure, i.e., For security, was 1{\%} in the previous development process.},
	Author = {Baca, D. and Boldt, M. and Carlsson, B. and Jacobsson, A.},
	Booktitle = {Availability, Reliability and Security (ARES), 2015 10th International Conference on},
	Date-Added = {2015-11-11 15:21:41 +0000},
	Date-Modified = {2015-11-11 15:21:41 +0000},
	Doi = {10.1109/ARES.2015.45},
	Journal = {Availability, Reliability and Security (ARES), 2015 10th International Conference on},
	Journal1 = {Availability, Reliability and Security (ARES), 2015 10th International Conference on},
	Keywords = {financial data processing; mobile computing; risk analysis; security of data; software engineering; Ericsson Corp; SEAP; baseline development process; industrial setting; integrated risk analysis process; mobile money transfer system; security-enhanced agile software development process; software version; Agile software development; Guidelines; Mobile communication; Risk analysis; Security; Software; Testing; Security; agile method; industrial setting; risk analysis; software development},
	Pages = {11--19},
	Title = {A Novel Security-Enhanced Agile Software Development Process Applied in an Industrial Setting},
	Ty = {CONF},
	Year = {2015},
	Year1 = {24-27 Aug. 2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/ARES.2015.45}}

@article{Dyba:2008aa,
	Abstract = {Agile software development represents a major departure from traditional, plan-based approaches to software engineering. A systematic review of empirical studies of agile software development up to and including 2005 was conducted. The search strategy identified 1996 studies, of which 36 were identified as empirical studies. The studies were grouped into four themes: introduction and adoption, human and social factors, perceptions on agile methods, and comparative studies. The review investigates what is currently known about the benefits and limitations of, and the strength of evidence for, agile methods. Implications for research and practice are presented. The main implication for research is a need for more and better empirical studies of agile software development within a common research agenda. For the industrial readership, the review provides a map of findings, according to topic, that can be compared for relevance to their own settings and situations.},
	Author = {Dyb{\aa}, Tore and Dings{\o}yr, Torgeir},
	Date = {2008/8//},
	Date-Added = {2015-11-11 14:52:23 +0000},
	Date-Modified = {2015-11-11 14:52:23 +0000},
	Doi = {http://dx.doi.org/10.1016/j.infsof.2008.01.006},
	Isbn = {0950-5849},
	Journal = {Information and Software Technology},
	Keywords = {Empirical software engineering; Evidence-based software engineering; Systematic review; Research synthesis; Agile software development; XP; Extreme programming; Scrum},
	Month = {8},
	Number = {9--10},
	Pages = {833--859},
	Title = {Empirical studies of agile software development: A systematic review},
	Ty = {JOUR},
	Url = {http://www.sciencedirect.com/science/article/pii/S0950584908000256},
	Volume = {50},
	Year = {2008},
	Bdsk-Url-1 = {http://www.sciencedirect.com/science/article/pii/S0950584908000256},
	Bdsk-Url-2 = {http://dx.doi.org/10.1016/j.infsof.2008.01.006}}
